#!/bin/bash

# Modify these or provide them in configuration file
FORTIVPN_URL="" # e.g. "vpn.host:port"
FORTIVPN_REALM="" # e.g. "foo"
FORTIVPN_ROUTES="" # e.g. "123.0.0.4/16 123.0.0.5/16"
FORTIVPN_USER="" # If empty SAML
FORTIVPN_PASSWORD="" # If empty use SAML
FORTIVPN_LOGIN_TRUSTED_CERT="" # Not supported for now
FORTIVPN_VPN_TRUSTED_CERT="" # Cert signature to trust (from /tmp/forti-vpn.log)

# The above can be overriden in the config file below
CONFIG_DIR="/etc"

# Modify these to provide tools locations
VPN_LOGIN=/opt/openfortivpn-webview/openfortivpn-webview
VPN_TOOL=/usr/local/bin/openfortivpn
VPN_TOOL_OPTIONS=""
VPN_INTERFACE=ppp0

# This is bit of stiupid but since the vpn process is sent to the background
# we have to wait for such a text to appear in the log, to know it succeded.
VPN_MATCH_TEXT="Tunnel is up and running."

LOG_FILE=/tmp/forti-vpn.log
TMP_FILE=$(mktemp)
TRACE_FILE=/tmp/forti-vpn.trace

script=$0
script="${script##*/}"

get_configuration() {

    if test -f "$TRACE_FILE"; then
        # Select file that script was (start|up)-ed with
        CONFIG_FILE=$(<${TRACE_FILE})
    else
        # If there is second parameter it should indicate elternative config file
        if [ -z "$1" ]; then
            # Default config file
            if test -f "${CONFIG_DIR}/forti-vpn.conf"; then
                CONFIG_FILE="${CONFIG_DIR}/forti-vpn.conf"
            fi
        else
            # Alternative config file
            if test -f "${CONFIG_DIR}/forti-vpn-$1.conf"; then
                CONFIG_FILE="${CONFIG_DIR}/forti-vpn-$1.conf"
            fi
        fi
    fi

    if test -f "${CONFIG_FILE}"; then
        source "${CONFIG_FILE}"
    else
        printf "${script}: missing configuration file.\n"
        exit 1
    fi

    if [ -z ${FORTIVPN_URL} ]; then
        printf "${script}: missing FORTIVPN_URL value.\n"
        exit 1
    fi
}

is_running() {
    pidof -x ${VPN_TOOL} -o $$ >/dev/null
}

start() {
    get_configuration $1

    echo "${CONFIG_FILE}" >${TRACE_FILE}

    # This `sudo` is to cache password! Script relies on password caching
    # because otherwise next sudo password request will most likely fail.
    sudo rm ${LOG_FILE} 2> /dev/null

    if [ ! -n "${FORTIVPN_ROUTES}" ]; then
        VPN_TOOL_OPTIONS="${VPN_TOOL_OPTIONS} --no-routes"
    fi

    if [ -n "${FORTIVPN_VPN_TRUSTED_CERT}" ]; then
        VPN_TOOL_OPTIONS="${VPN_TOOL_OPTIONS} --trusted-cert ${FORTIVPN_VPN_TRUSTED_CERT}"
    fi

    if [ ! -n "${FORTIVPN_USER}" ]; then
        if [ ! -n "$VPN_LOGIN" ]; then
            # Using `tee` to make sure that login URL is visible
            sudo ${VPN_TOOL} --saml-login ${FORTIVPN_URL} --realm=${FORTIVPN_REALM} \
                 ${VPN_TOOL_OPTIONS} 2>&1 | tee "${LOG_FILE}" &
        else
            # Get cookie after authorization
            COOKIE=$(${VPN_LOGIN} ${FORTIVPN_URL} --realm=${FORTIVPN_REALM} --url-regex="/sslvpn/portal" 2> /dev/null)
            # Establish VPN connection
            echo ${COOKIE} | sudo ${VPN_TOOL} ${FORTIVPN_URL} --realm=${FORTIVPN_REALM} \
                --cookie-on-stdin ${VPN_TOOL_OPTIONS} > ${LOG_FILE} 2>&1 &
        fi
    else
        # Establish VPN connection
        echo "" | sudo ${VPN_TOOL} ${FORTIVPN_URL} --realm=${FORTIVPN_REALM} \
            -u ${FORTIVPN_USER} -p ${FORTIVPN_PASSWORD} ${VPN_TOOL_OPTIONS} > ${LOG_FILE} 2>&1 &
    fi

    # Wait for the log file to appear
    while ! test -f ${LOG_FILE}; do sleep 1; done

    # Let's parse the log file for a while..
    if timeout 30 tail -f ${LOG_FILE} | grep -q -wi "${VPN_MATCH_TEXT}"; then
        # Looks like we are connected. Let's set up routing if target
        # networks are provided.
        if [ -n "${FORTIVPN_ROUTES}" ]; then
            addr=`ip addr show ${VPN_INTERFACE} | grep "inet\b" | awk '{print $2}' | cut -d/ -f1`
            for route in ${FORTIVPN_ROUTES}; do
                sudo route add -net $route gw $addr ${VPN_INTERFACE}
            done
        fi

        echo "${script}: (${FORTIVPN_URL}) started."
    else
        echo "${script}: (${FORTIVPN_URL}) failed to start."
    fi
}

stop() {
    get_configuration

    sudo kill -SIGINT $(pidof ${VPN_TOOL}) > /dev/null 2>&1

    rm ${LOG_FILE} 2> /dev/null
    rm ${TRACE_FILE} 2> /dev/null

    echo "${script}: (${FORTIVPN_URL}) stopped."
}

status() {
    get_configuration

    if is_running; then
        echo "${script}: (${FORTIVPN_URL}) running."
    else
        echo "${script}: (${FORTIVPN_URL}) not running."
    fi
}

case "$1" in
    start|up)
        start $2
        ;;
    stop|down)
        stop
        ;;
    status)
        status
        ;;
    restart)
        stop
        start $2
        ;;
    *)
    echo $"Usage: $0 {start|up|stop|down|status|restart} [configuration]"
    exit 1
esac
